# Please read: http://docs.ceph.com/ceph-ansible/master/osds/scenarios.html

# Advanced configuration

# This configuration is useful when more granular control is wanted when setting
# up devices and how they should be arranged to provision an OSD. It requires an
# existing setup of volume groups and logical volumes (ceph-volume will not create these).

# To use this configuration, the lvm_volumes option must be populated with logical volumes
# and volume groups. Additionally, absolute paths to partitions can be used for block.db, and block.wal.

# Note: This configuration uses ceph-volume lvm create to provision OSDs

# Supported lvm_volumes configuration settings:

# data: The logical volume name or full path to a raw device (an LV will be created using 100% of the raw device)
# data_vg: The volume group name, required if data is a logical volume.
# crush_device_class: CRUSH device class name for the resulting OSD, allows setting set the device class for each OSD,
#                     unlike the global crush_device_class that sets them for all OSDs.

# Note: If you wish to set the crush_device_class for the OSDs when using devices:
# (e.g.,)
#
# devices: 
#   - /dev/sda
#   - /dev/sdb
# crush_device_class: "ssd"
#
# Then you must set it using the **global crush_device_class option** as shown above.
# There is no way to define a specific CRUSH device class per OSD when using devices like there is for lvm_volumes.

##############
# CEPH OPTIONS
##############

# Use ceph-volume to create OSDs from logical volumes.
# lvm_volumes is a list of dictionaries.


# osd_objectstore now defaults to bluestore
#osd_objectstore: bluestore

# Bluestore: Each dictionary must contain at least data. When defining wal or
# db, it must have both the lv name and vg group (db and wal are not required).
# This allows for four combinations: just data, data and wal, data and wal and
# db, data and db.
# For example:
# lvm_volumes:
#   - data: data-lv1
#     data_vg: vg1
#     wal: wal-lv1
#     wal_vg: vg1
#     crush_device_class: foo
#   - data: data-lv2
#     db: db-lv2
#     db_vg: vg2
#   - data: data-lv3
#     wal: wal-lv1
#     wal_vg: vg3
#     db: db-lv3
#     db_vg: vg3
#   - data: data-lv4
#     data_vg: vg4
#   - data: /dev/sda
#   - data: /dev/sdb1


### bluestore objectstore variables:
### db: The logical volume name or full path to a partition.
### db_vg: The volume group name, required if db is a logical volume.
### wal: The logical volume name or full path to a partition.
### wal_vg: The volume group name, required if wal is a logical volume.

### Note:
### These bluestore variables are optional optimizations. Bluestoreâ€™s db and wal will only benefit from faster devices. It is possible to create a bluestore OSD with a single raw device.
### 
### Warning:
### Each entry must be unique, duplicate values are not allowed
### 
### bluestore example using raw devices:
### 
### osd_objectstore: bluestore
### lvm_volumes:
###   - data: /dev/sda
###   - data: /dev/sdb
### Note:
### Volume groups and logical volumes will be created in this case, utilizing 100% of the devices.
### 
### bluestore example with logical volumes:
### 
### osd_objectstore: bluestore
### lvm_volumes:
###   - data: data-lv1
###     data_vg: data-vg1
###   - data: data-lv2
###     data_vg: data-vg2
### Note:
### Volume groups and logical volumes must exist.
### 
### bluestore example defining wal and db logical volumes:
### 
### osd_objectstore: bluestore
### lvm_volumes:
###   - data: data-lv1
###     data_vg: data-vg1
###     db: db-lv1
###     db_vg: db-vg1
###     wal: wal-lv1
###     wal_vg: wal-vg1
###   - data: data-lv2
###     data_vg: data-vg2
###     db: db-lv2
###     db_vg: db-vg2
###     wal: wal-lv2
###     wal_vg: wal-vg2


# Warning: Each entry must be unique, duplicate values are not allowed
#osd_scenario: lvm
osd_objectstore: bluestore
####lvm_volumes:
####  - data: /dev/sdb 
####    db: lv1-db 
####    db_vg: vg1-db 
####    wal: lv1-wal 
####    wal_vg: vg1-wal 

lvm_volumes:
  - data: lv1-node3-data 
    data_vg: vg1-node3-data 
    db: lv1-node3-db 
    db_vg: vg1-node3-db 
    wal: lv1-node3-wal 
    wal_vg: vg1-node3-wal 
  - data: lv1-node4-data 
    data_vg: vg1-node4-data 
    db: lv1-node4-db
    db_vg: vg1-node4-db
    wal: lv1-node4-wal 
    wal_vg: vg1-node4-wal 
  - data: lv1-node5-data 
    data_vg: vg1-node5-data 
    db: lv1-node5-db 
    db_vg: vg1-node5-db 
    wal: lv1-node5-wal 
    wal_vg: vg1-node5-wal 


#lvm_volumes: []
#crush_device_class: ""

# osds_per_device: Provision more than 1 OSD (the default if unset) per device.
# NVMe drives should have 4
#osds_per_device: 1

